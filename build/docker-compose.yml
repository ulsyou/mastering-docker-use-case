version: '3.8'

name: "Mastering Docker"
services:
    # ---------------------------
    # API Gateway
    # ---------------------------
    api-gateway:
        build: ../application/api-gateway/
        tty: true
        init: true
        privileged: true
        ports:
            - 8080:8080
        expose:
            - "8080"
        networks:
            - backend
        hostname: api-gateway
        container_name: api-gateway
        environment:
            - SPRING_PROFILES_ACTIVE=docker
        image: api-gateway


    # ---------------------------
    # Service One
    # ---------------------------
    service-one:
        build: ../application/service-one/
        depends_on:
            - service-one-db
        tty: true
        init: true
        privileged: true
        ports:
            - 8082:8082
        networks:
            - backend
        hostname: service-one
        container_name: service-one
        environment:
            - SPRING_PROFILES_ACTIVE=docker
        image: service-one


    # ---------------------------
    # Service One Database
    # ---------------------------
    service-one-db:
        tty: true
        init: true
        privileged: true
        ports:
            - 27017:27017
        expose:
            - "27017"
        networks:
            - backend
        hostname: serviceonedb
        container_name: service-one-db
        environment:
            - MONGODB_USER=service-one
            - MONGODB_PASS=service-one
            - MONGO_DATA_DIR=/data/db
            - MONGO_LOG_DIR=/dev/null
        volumes:
            - mongodata:/data/db
        platform: linux/amd64
        image: mongo:3.7
        command: mongod --smallfiles

    # ---------------------------
    # Service Two
    # ---------------------------
    service-two:
        build: ../application/service-two/
        depends_on:
            - service-two-db
        restart: always
        tty: true
        init: true
        privileged: true
        ports:
            - 8084:8084
        networks:
            - backend
        hostname: service-two
        container_name: service-two
        environment:
            - SPRING_PROFILES_ACTIVE=docker
        image: service-two

    # ---------------------------
    # Service Two Database
    # ---------------------------
    service-two-db:
        tty: true
        init: true
        privileged: true
        ports:
            - 3310:3306
        expose:
            - "3310"
        networks:
            - backend
        hostname: servicetwodb
        container_name: service-two-db
        environment:
            - MYSQL_ROOT_PASSWORD=root123
            - MYSQL_DATABASE=service-two
            - MYSQL_USER=service-two
            - MYSQL_PASSWORD=service-two
        platform: linux/amd64
        image: mysql/mysql-server:8.0


    # ---------------------------
    # Web Application
    # ---------------------------
    web-application:
        build: ../application/web-application/
        tty: true
        init: true
        privileged: true
        ports:
            - 80:4200
        networks:
            - frontend
        container_name: web-application
        volumes:
            - dist:/usr/share/nginx/html
        image: web-application

    # ---------------------------
    # Messaging Queue Cluster
    # ---------------------------
    rabbit:
        tty: true
        init: true
        privileged: true
        ports:
            - 5672:5672
            - 15672:15672
        expose:
            - "15672"
        networks:
            - backend
        hostname: rabbit
        container_name: rabbit
        environment:
            - CLUSTERED=true
            - RAM_NODE=true
            - CLUSTER_WITH=rabbit
            - RABBITMQ_DEFAULT_USER=docker
            - RABBITMQ_DEFAULT_PASS=docker
        image: rabbitmq:3.8-management-alpine



    # ---------------------------
    # Registration and
    # Discovery Cluster
    # ---------------------------
    consul:
        tty: true
        init: true
        privileged: true
        ports:
            - 8500:8500
            - 8600:8600
        expose:
            - 8500
            - 8600
        networks:
            - backend
        hostname: consul
        container_name: consul
        volumes:
            - data:/consul/data
        image: consul:1.7.3
        command: agent -server -client 0.0.0.0 -ui -bootstrap-expect=1
            -data-dir=consul/data -datacenter=blr

networks:
    frontend:
        name: frontend
        driver: bridge
    backend:
        name: backend
        driver: bridge

volumes:
    mongodata:
    data:
    dist:
  